enum ContentType {
  MESSAGE
  IMAGE
}

type Message {
  username: String!
  content: String!
  type: ContentType!
  timestamp: String!
}

extend type Query {
  getMessagesPaginated(start: Int!, count: Int!): [Message!]!
  getLengthOfChatFeed: Int!
}

extend type Mutation {
  insertMessage(message: String!): Boolean!
  insertImage(data: String!): Boolean!
}

extend type Subscription {
  chatFeed: Message!
}
type Media {
  id: String!
}

extend type Mutation {
  load(file: String!): Media!
  play(currentTime: Float!): Boolean!
  pause(currentTime: Float!): Boolean!
}

enum Action {
  PLAY
  PAUSE
}

type MediaAction {
  action: Action!
  currentTime: Float!
  user: String!
}

type Subscription {
  mediaActions: MediaAction!
}
type User {
  username: String!
  media: Media
}

type Mutation {
  signIn(username: String!, password: String): String!
  signOut: Boolean!
}

type Query {
  getAllUsers: [User!]!
}
